from sklearn.model_selection import cross_val_predict
from sktime.forecasting.base import BaseForecaster

import pandas as pd
import numpy as np

class ReconcilerForecaster(BaseForecaster):
    """
    ReconcilerForecaster combines predictions from a base forecaster and a regressor to provide more accurate forecasts.

    This class first generates base predictions using the provided `base_forecaster` through cross-validation, and 
    then applies the `regressor` to reconcile these predictions for final forecast adjustment.

    Parameters:
    - base_forecaster (BaseForecaster): A forecasting model used to generate initial predictions. 
      This can be any forecaster that implements the fit and predict methods, such as a naive or ARIMA model.
    - regressor (sklearn estimator): A regression model used to adjust base predictions.
    - cv (sklearn.model_selection.CrossValidator): Cross-validation strategy for splitting the training data 
      into training and test sets. Typically, a KFold or similar strategy is used.

    Attributes:
    - base_forecaster: The forecaster used to generate base predictions.
    - regressor: The regressor used to adjust base predictions.
    - cv: The cross-validation strategy used for training.
    - _converter_store_y (dict): A dictionary for storing intermediate results (internal use).
    - _fh: Forecasting horizon (internal use).
    """
    def __init__(self, base_forecaster, regressor, cv):
        """
        Initializes the ReconcilerForecaster with the given base forecaster, regressor, and cross-validation strategy.

        Args:
        - base_forecaster (BaseForecaster): Forecaster to generate initial predictions.
        - regressor (sklearn estimator): Regressor to adjust the base predictions.
        - cv (sklearn.model_selection.CrossValidator): Cross-validation object for splitting data.
        """
        self.base_forecaster = base_forecaster
        self.regressor = regressor
        self.cv = cv
        self._converter_store_y = {}
        self._fh=None


    def _fit(self, y, X=None, fh=None):
        """
        Fits the reconciler forecaster using the provided training data.

        The method splits the data using cross-validation, generates base predictions from the base forecaster, 
        and fits the regressor to adjust these predictions.


        Ensure y is passed as a pandas Series (required by NaiveForecaster)

        Args:
        - y (array-like): The target time series to forecast.
        - X (optional, array-like): Exogenous variables (not used in this implementation).
        - fh (ForecastingHorizon): Forecasting horizon for the model (used internally, not utilized here).
        """
        y = pd.Series(y)
        
        base_preds = []
        
        for train_idx, test_idx in self.cv.split(y):
            y_train = y.iloc[train_idx]
            fh_test = np.arange(1, len(test_idx) + 1)
            
            self.base_forecaster.fit(y_train)
            preds = self.base_forecaster.predict(fh_test)
            base_preds.append(preds)
        
        base_preds = np.concatenate(base_preds)
        
        # Fit the regressor using base predictions
        self.regressor.fit(base_preds.reshape(-1, 1), y)

    def _predict(self, fh, X=None):
        """
        Generates predictions using the reconciler forecaster.

        The method first uses the base forecaster to generate initial predictions and then applies the regressor 
        to adjust those predictions for improved accuracy.

        Args:
        - fh (ForecastingHorizon): The forecasting horizon for generating predictions.
        - X (optional, array-like): Exogenous variables (not used in this implementation).

        Returns:
        - np.ndarray: Adjusted forecasted values generated by the regressor.
        """
        # Get base forecaster predictions
        base_preds = self.base_forecaster.predict(fh)
        # Use regressor to adjust predictions
        return self.regressor.predict(base_preds.to_numpy().reshape(-1, 1))

